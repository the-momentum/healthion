---
globs: app/models/**,app/database.py,app/mappings.py,app/utils/mappings_meta.py
alwaysApply: false
---

# Models Layer

## Location

Models are located in `app/models/` directory.

## Purpose

Models define SQL table structure in the database using SQLAlchemy. Each model represents one table and contains column definitions, relationships, and constraints.

## Required files

### `app/database.py`
- Contains `BaseDbModel` class with `type_annotation_map`
- Defines custom Python to SQL type mappings
- Sets up database engine and session management

### `app/mappings.py`
- Defines custom Python types with `Annotated` syntax
- Creates shortcuts to avoid `mapped_column` repetition
- Defines relationship types and foreign keys

## Model structure

### Base class
All models must inherit from `BaseDbModel`:

```python
from app.database import BaseDbModel

class User(BaseDbModel):
    # model definition
```

### Column definitions
Use `Mapped` with custom types from `mappings.py`:

```python
from sqlalchemy.orm import Mapped
from app.mappings import PrimaryKey, Unique, datetime_tz, email

class User(BaseDbModel):
    id: Mapped[PrimaryKey[UUID]]
    email: Mapped[Unique[email]]
    created_at: Mapped[datetime_tz]
```

### Relationships
Define relationships using custom types:

```python
from app.mappings import OneToMany, ManyToOne, FKUser

class User(BaseDbModel):
    workouts: Mapped[OneToMany["Workout"]]
    # other fields

class Workout(BaseDbModel):
    user_id: Mapped[FKUser]
    user: Mapped[ManyToOne["User"]]
```

## Custom types usage

### Primary keys and constraints with generic type
- `PrimaryKey[T]` - Primary key
- `Unique[T]` - Unique constraint
- `UniqueIndex[T]` - Unique with index
- `Indexed[T]` - Indexed column

### Custom types (define your own if needed)
- `str_10`, `str_50`, `str_100`, `str_255` - String with length limits
- `email` - Email field with validation
- `numeric_10_2`, `numeric_15_5` - Decimal with precision
- `datetime_tz` - Timezone-aware datetime

### Foreign keys
- `FKUser` - Pre-defined foreign key relationships, define new here if needed

### Relationship types
- `OneToMany[T]` - One-to-many relationship
- `ManyToOne[T]` - Many-to-one relationship

## Type annotation mapping

In `database.py`, define custom Python to SQL mappings:

```python
type_annotation_map = {
    str: Text,
    UUID: SqlUUID,
}
```

## Model features

- Automatic table naming (lowercase class name)
- Built-in `__repr__` method
- `id_str` property for string representation of ID
- Automatic relationship detection via metaclass
- We don't need to use `mapped_colummn()` function in models definition, everything is automated