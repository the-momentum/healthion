---
globs: app/api/routes/**
alwaysApply: false
---

# API Routes Architecture

## Directory structure

```
app/api/routes/
├── __init__.py          # Head router (imports all versions)
├── v1/                  # API version 1
│   ├── __init__.py      # Version router (includes all v1 routes)
│   └── example.py       # Specific routes
└── v2/                  # API version 2 (if exists)
    ├── __init__.py
    └── ...
```

### Version selection

- **Multiple versions directories exist**: Ask user which version to create routes for
- **Single version exists**: Use that version by default

## Router hierarchy

1. **Module routers** - Individual route files
2. **Version router** - Groups routes by API version
3. **Head router** - Combines all versions with prefixes
4. **Main router** - Integrates with FastAPI app

More details about routers and ho to structure them in @routes_routers.mdc.

## Route implementation details

### Route definition
- Use `@router.method()` decorator with HTTP method and path
- Add `response_model` (Pydantic model from schemas) to validate response
- Add `status_code` using `fastapi.status` for readability
- Define functions as `async` by default

### Function parameters
- Include `request: Request` if needed
- Include `session: DbSession` if using database
- Add other required parameters with type annotations
- All parameters must have type annotations

### Path naming
- Use **kebab-case** for paths: `/heart-rate`, `/import-data`

### Function body
- Keep route code minimal
- Delegate all business logic to corresponding service
- Import Pydantic models from `app.schemas`
- Import services from `app.services`
- Use `DbSession` from `app.database` for session type annotation

## Routes flow

### Request flow
request → main.py → head_router → version_router → router → specific endpoint → service
### Response flow
service → response_model (pydantic) validation → router → version_router → head_router → main.py → client

