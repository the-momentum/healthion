---
globs: app/repositories/**
alwaysApply: false
---

# Repositories Layer

**Type annotations are mandatory for all parameters and return types.**

## Location

Repositories are located in `app/repositories/` directory.

## Purpose

Repositories handle **ONLY** database operations. They are the single source of truth for all database interactions.

## Data types

### Input/Output
- **SQLAlchemy models ONLY** - All input and output must be SQLAlchemy models
- **No Pydantic schemas** - Repositories work exclusively with database models

## Repository types

### CRUD repositories
For basic database operations, inherit from `CrudRepository`:

```python
from app.repositories.repositories import CrudRepository
from app.models.user import User
from app.schemas.user import UserCreate, UserUpdate

class UserRepository(CrudRepository[User, UserCreate, UserUpdate]):
    def __init__(self, model: type[User]):
        super().__init__(model)
```

### Extended repositories
Add custom database methods by extending the base repository:

```python
class UserRepository(CrudRepository[User, UserCreate, UserUpdate]):
    def __init__(self, model: type[User]):
        super().__init__(model)
    
    def get_by_email(self, db_session: DbSession, email: str) -> User | None:
        return db_session.query(self.model).filter(self.model.email == email).one_or_none()
    
    def get_active_users(self, db_session: DbSession) -> list[User]:
        return db_session.query(self.model).filter(self.model.is_active == True).all()
```

### Mixin repositories
Create separate mixin repositories for specific functionality:

```python
class ActivityMixin:
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
    
    def is_user_active(self, db_session: DbSession, user_id: UUID) -> bool:
        user = db_session.query(self.model).filter(self.model.id == user_id).one_or_none()
        return user.is_active if user else False

class UserRepository(CrudRepository[User, UserCreate, UserUpdate], ActivityMixin):
    def __init__(self, model: type[User]):
        super().__init__(model)
```

## Repository flow

database → SQLAlchemy model -> repository → SQLAlchemy model -> service